##
 # PostgreSQL Kubernetes resources
 # Created for project Lobbier: https://github.com/BillMyres/Lobbier
 # @author Thomas vanBommel
 # @since 11-2020
 ##

# ConfigMap to store the requred tables to create when no database exists
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  initdb.sql: |
    CREATE TABLE public.users (
      username TEXT NOT NULL,
      password TEXT NOT NULL,
      id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 9999999999 CACHE 1 ),
      position_x NUMERIC NOT NULL DEFAULT 0.00,
      position_y NUMERIC NOT NULL DEFAULT 0.00,
      CONSTRAINT id PRIMARY KEY (id),
      CONSTRAINT username UNIQUE (username));

    CREATE TABLE public.lobbies (
      name TEXT NOT NULL,
      id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 9999999999 CACHE 1 ),
      owner TEXT NOT NULL,
      CONSTRAINT lobbies_pkey PRIMARY KEY (id),
      CONSTRAINT owner FOREIGN KEY (owner)
          REFERENCES public.users (username) MATCH SIMPLE
          ON UPDATE NO ACTION
          ON DELETE CASCADE
          NOT VALID);

    CREATE TABLE public.messages (
      lobby BIGINT NOT NULL,
      owner TEXT NOT NULL,
      message TEXT NOT NULL,
      date TEXT NOT NULL,
      CONSTRAINT lobby FOREIGN KEY (lobby)
          REFERENCES public.lobbies (id) MATCH SIMPLE
          ON UPDATE NO ACTION
          ON DELETE CASCADE,
      CONSTRAINT owner FOREIGN KEY (owner)
          REFERENCES public.users (username) MATCH SIMPLE
          ON UPDATE NO ACTION
          ON DELETE NO ACTION);

    CREATE TABLE public.attendance (
      lobby BIGINT NOT NULL,
      player BIGINT NOT NULL,
      CONSTRAINT lobby FOREIGN KEY (lobby)
          REFERENCES public.lobbies (id) MATCH SIMPLE
          ON UPDATE NO ACTION
          ON DELETE CASCADE,
      CONSTRAINT player FOREIGN KEY (player)
          REFERENCES public.users (id) MATCH SIMPLE
          ON UPDATE NO ACTION
          ON DELETE CASCADE);

---

# storage requirements for database
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: postgres-storage
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/psql-data"

---

# storage claim for database
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: postgres-storage
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---

# postgres deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
        - name: initdb
          configMap:
            name: postgres-config
      containers:
        - name: postgres
          image: postgres
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdb
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: PGDATABASE
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: PGUSER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: PGPASSWORD
          ports:
            - name: psql
              containerPort: 5432

---

# expose postgres service to other nodes
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
